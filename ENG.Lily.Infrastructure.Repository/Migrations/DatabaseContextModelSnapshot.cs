// <auto-generated />
using System;
using ENG.Lily.Infaestructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ENG.Lily.Infrastructure.Repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Developer");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate");

                    b.Property<int?>("DeveloperId");

                    b.Property<int>("Level");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("Text")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Fund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Aumont");

                    b.Property<int>("CreditCardCompany");

                    b.Property<string>("CreditCardLastFourDigits")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTime>("DateCreate");

                    b.Property<int?>("DeveloperId");

                    b.Property<bool>("IsConfirmed");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("TransactionId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Fund");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverUrl")
                        .IsRequired();

                    b.Property<int?>("GenreId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int?>("PublisherId");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.GameGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.ManyToMany.PlatformProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PlatformId");

                    b.Property<int?>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PlatformProject");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProjectId");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500);

                    b.Property<int?>("DeveloperId");

                    b.Property<int?>("GenreId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("TargetReleaseDate");

                    b.Property<string>("WhyInvest")
                        .IsRequired()
                        .HasMaxLength(750);

                    b.HasKey("Id");

                    b.HasIndex("DateCreate");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("GenreId");

                    b.HasIndex("Name");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsVerified");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ENG.Lily.Domain.Entities.Developer", "Developer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("DeveloperId");

                    b.HasOne("ENG.Lily.Domain.Entities.Project", "Project")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Fund", b =>
                {
                    b.HasOne("ENG.Lily.Domain.Entities.Developer", "Developer")
                        .WithMany("SendedFunds")
                        .HasForeignKey("DeveloperId");

                    b.HasOne("ENG.Lily.Domain.Entities.Project", "Project")
                        .WithMany("Funds")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Game", b =>
                {
                    b.HasOne("ENG.Lily.Domain.Entities.GameGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("ENG.Lily.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.ManyToMany.PlatformProject", b =>
                {
                    b.HasOne("ENG.Lily.Domain.Entities.Platform", "Platform")
                        .WithMany("Projects")
                        .HasForeignKey("PlatformId");

                    b.HasOne("ENG.Lily.Domain.Entities.Project", "Project")
                        .WithMany("Platforms")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Media", b =>
                {
                    b.HasOne("ENG.Lily.Domain.Entities.Project", "Project")
                        .WithMany("Media")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("ENG.Lily.Domain.Entities.Project", b =>
                {
                    b.HasOne("ENG.Lily.Domain.Entities.Developer", "Developer")
                        .WithMany("Projects")
                        .HasForeignKey("DeveloperId");

                    b.HasOne("ENG.Lily.Domain.Entities.GameGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");
                });
#pragma warning restore 612, 618
        }
    }
}
